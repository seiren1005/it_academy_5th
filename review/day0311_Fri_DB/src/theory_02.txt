
9. WHERE 절 : 원하는 조건을 줘서 해당하는 데이터만 조회

    SELECT [column_name or 표현식]
    FROM [table_name]
    WHERE [조건 or 값];


10. OPERATOR (연산자) 종류
    = : 같은 조건 검색
    !=, <> : 같지 않은 조건 검색
    > : 왼쪽이 오른쪽보다 큰지 (>= : 크거나 같은지)
    < : 왼쪽이 오른쪽보다 작은지 (<= : 작거나 같은지)
    BETWEEN a AND b : a <= x <= b, a와 b 사이에 있는 범위값
        ORACLE 안에서 비교 연산자로 변환해야 하기 때문에 BETWEEN 사용하면
        쿼리가 간결해지지만 성능이 떨어짐
        BETWEEN의 경우 한글은 자음만 있으면 데이터로 인식하지 못함
        모음과 합쳐져야 하나의 글자로 인식

            BETWEEN '아 AND '이'
                아 ~ 이 범위값에서 검색

    LIKE : 특정 패털을 가지고 있는 조건을 검색
        %, _와 같이 사용
        % : 글자수 제한 없음, 어떤 글자가 와도 상관 없음
        _ : 한글자, 어떤 글자강 와도 상관 없음

    IN(a, b, c, ...) : a or b or c or ... 인 조건 검색
    a AND b : a조건과 b조건 모두 만족하는 만족하는 데이터 검색
    a OR b : a조건 또는 b조건 둘 중 하나 만족하는 데이터 검색
    NOT a : a조건이 아닌 데이터 ㄱ머색


11. DB (데이터베이스) 에도 NULL 값 존재
    ORACLE에서 NULL은 데이터의 한 종류로 취급 (어떤 값인지 모르는 값)
    NULL에는 어떤 연산을 수행해도 결과값이 늘 NULL이 나오므로 주의
    NULL 값을 비교시
        같으면 IS NULL
        다르면 IS NOT NULL


12. ORDER BY : 출력결과 정렬
    ASC(ASCENDING) : 오름차순
    DESC(DESCENDING) : 내림차순
    생략시 ASC가 default값

    SELECT [column_name1], [column_name2], [column_name3]
    FROM [table_name]
    ORDER BY [column_name1], [column_name2] DESC, 3 ASC;
        column_name1으로 ASC 정렬
        column_name2으로 DESC 정렬
        column_name3으로 ASC 정렬
            ORDER BY 뒤에 숫자가 오면 SELECT 절 뒤에 나열한 n번째 컬럼을 의미
            여기서는 3번째 컬럼이므로 [column_name3] 의미

    ORDER BY 뒤에 컬럼 별칭을 줘도 정렬 가능
    조회 결과를 보기 좋게 하기 위해서 정렬을 사용
    ORDER BY 절은 보기에는 편하나 DB SYSTEM 입장에서는 자원을 많이 소모하는 작업
    INDEX 사용을 권장


13. 집합 연산자 : 테이블 하나하나 또는 조회 결과를 집합으로 보고 연산을 함
    SELECT 1 + SELECT 2 = 결과 -> 집합 연산자

    UNION : 합집합 (중복값 제외하고 정렬)
    UNION ALL : 합집합 (중복값 제외하지 않고 정렬도 안함)
    INTERSECT : 교집합 (정렬함)
    A MINUS B : 차집합 (A에서 A와 B의 공통값을 제외)
        A 집합의 크기가 B 집합보다 커야함 (두 집합에 공통값이 없으면 상관없음)


14. 단일행 함수
    함수 : 입력값을 받아서 정해진 순서에 따라 작업을 하고 결과를 반환하는 기능

        문자 함수
            INITCAT('문자열') : 문자열 첫글자를 대문자로 변환
            LOWER('문자열') : 문자열을 소문자로 변환
            UPPER('문자열') : 문자열을 대문자로 변환
            LENGTH('문자열') : 문자열의 길이를 반환
            CONCAT('문자열1', '문자열2') : 두 문자열을 결합 (문자열이 2개까지만 가능) 
            SUBSTR : 문자열에서 일부 문자열 추출

                SUBSTR('문자열', 인덱스, 추출할 개수)
                    인덱스부터 추출할 개수만큼 추출
                    JAVA와 달리 ORACLE DB는 인덱스가 1부터 시작

            INSTR : 문자열에서 특정 문자열의 시작 위치를 반환 (없으면 0 반환)

                INSTR('문자열', '찾을 문자열')

                문자열 내에 찾을 문자열이 여러개 있을 경우
                INSTR('문자열', '찾을 문자열', 인덱스, n)
                    '문자열'내에서 '찾을 문자열'을 인덱스부터 검색해
                    n번째 있는 '찾을 문자열'의 시작 위치를 반환
            
            LPAD('문자열', 길이, '채울문자') : 문자열 왼쪽에 특정 문자 채움
                길이 = 문자열 길이 + 채울 문자 길이
            RPAD('문자열', 길이, '채울문자') : LPAD 반대
            LTRIM('문자열', '지울 문자') : '문자열' 왼쪽에 특정 문자 지움
                '지울 문자' 생략시 공백을 지움
            RTRIM('문자열', '지울 문자') : LTRIM 반대
            TRIM('문자열') : 문자열 양쪽에 있는 공백을 지움
            REPLACE : 문자열에서 특정 문자열을 교체

                REPLACE('문자열', '교체대상 문자열', '교체 문자열')
                '문자열'에서 교체대상 문자열'을 찾아 '교체 문자열'로 교체대상
        
        숫자관련 함수
            ROUND(숫자, n) : 숫자의 n번째 자리까지 그대로 적고 그 이하는 반올림
                숫자 :  1  2  3  4. 1  2  3  4  
                n    : -3 -2 -1  0  1  2  3  4
            TRUNC(숫자, n) : 버림
            MOD(a, b) : a / b 의 나머지
            FLOOR : 바닥함수, 가장 가까운 작은 정수 출력 (내림)
            CEIL : 천장함수, 가장 가까운 큰 정수 출력 (올림)
            POWER(a, b) : a^b

        날짜관련 함수
            SYSDATE : SYSTEM의 현재 날짜 반환
            TO_DATE('날자 형식의 문자열', 'date format') : 문자열 -> 날짜 타입

                TO_DATE('2022-03-03', 'RRRR-MM-dd') '2022-03-03' 문자열 -> 날짜 타입
                TO_DATE('2022-03-03', 'YYYY-MM-dd')

                연도 표현에 RR : 50년 기준으로 작으면 20이 앞에 붙고 크거나 같으면 19가 붙음
                연도 표현에 YY : 무조건 20이 앞에 붙음

            TO_CAHR(날짜 타입값, 'format') : 날짜를 특정 포맷의 문자열로 변환

                TO_CHAR(SYSDATE, 'YYYY/MM/dd') '2022/03/11'

            MONTHS_BETWEEN(date1, date2) : 두 날짜 사이의 개월 수를 반환
            ADD_MONTHS(date, n) : 특정 날짜에 n 개월을 더한 날짜 반환
            NEXT_DAY(date, '요일') : 주어진 날짜 기준으로 지정한 요일의 제일 빠른 날짜 반환
            LAST_DAY(date) : 해당 날짜가 속한 달의 마지막 날짜 반환
            ROUND(date) : 날짜를 반올림
                낮 12시 정오를 기준으로 지났으면 다음날
            TRUNC(date) : 날짜를 버림
                00시 기준으로 날짜를 반환  

